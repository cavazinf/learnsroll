// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleDAO {
    address public admin;
    mapping(address => bool) public members;
    
    struct Proposal {
        address proposer;
        string description;
        uint votingDeadline;
        uint yesVotes;
        uint noVotes;
        bool executed;
    }
    
    Proposal[] public proposals;
    
    event ProposalCreated(address indexed proposer, uint indexed proposalId, string description);
    event Voted(address indexed voter, uint indexed proposalId, string vote);
    
    constructor() {
        admin = msg.sender;
    }
    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }
    
    function joinDAO() external payable {
        require(msg.value > 0, "Membership fee required");
        members[msg.sender] = true;
    }
    
    function createProposal(string memory _description, uint _votingDeadline) external {
        require(members[msg.sender], "Must be a member to create a proposal");
        proposals.push(Proposal(msg.sender, _description, _votingDeadline, 0, 0, false));
        emit ProposalCreated(msg.sender, proposals.length - 1, _description);
    }
    
    function vote(uint _proposalId, string memory _vote) external {
        require(members[msg.sender], "Must be a member to vote");
        require(_proposalId < proposals.length, "Invalid proposal ID");
        require(!proposals[_proposalId].executed, "Proposal already executed");
        
        if (keccak256(bytes(_vote)) == keccak256(bytes("yes"))) {
            proposals[_proposalId].yesVotes++;
        } else if (keccak256(bytes(_vote)) == keccak256(bytes("no"))) {
            proposals[_proposalId].noVotes++;
        } else {
            revert("Invalid vote. Use 'yes' or 'no'");
        }
        
        emit Voted(msg.sender, _proposalId, _vote);
    }
    
    function executeProposal(uint _proposalId) external onlyAdmin {
        require(_proposalId < proposals.length, "Invalid proposal ID");
        require(block.timestamp >= proposals[_proposalId].votingDeadline, "Voting period not over");
        require(!proposals[_proposalId].executed, "Proposal already executed");
        
        if (proposals[_proposalId].yesVotes > proposals[_proposalId].noVotes) {
            // Execute proposal logic here
            proposals[_proposalId].executed = true;
        }
    }
}
